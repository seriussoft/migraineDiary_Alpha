@using Microsoft.Owin.Security
@model MigraineDiaryMVC.Models.RedirectModel

<h4>Use another service to log in.</h4>
<hr />
@{
	var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
	if (loginProviders.Count() == 0)
	{
	<div>
		@*<p>There are no external authentication services configured. See <a href="http://go.microsoft.com/fwlink/?LinkId=313242">this article</a>
            for details on setting up this ASP.NET application to support logging in via external services.</p>*@
		<p>There are currently no external authentication services configured. Coming soon...</p>
	</div>
	}
	else
	{
		string action = Model.Action;
		string returnUrl = Model.ReturnUrl;
		using (Html.BeginForm(action, MigraineDiaryMVC.Controllers.AccountController.CONTROLLER_NAME, new { ReturnUrl = returnUrl }))
		{
	@Html.AntiForgeryToken()
	<div id="socialLoginList">
		<p>
			@foreach (AuthenticationDescription p in loginProviders)
			{
				@MakeLoginButton(p);
				@*<button type="submit" class="btn btn-default" id="@p.AuthenticationType" name="provider" value="@p.AuthenticationType" title="Log in using your @p.Caption account">@p.AuthenticationType</button>*@
			}
		</p>
	</div>
		}
	}
}
@helper MakeLoginButton(AuthenticationDescription description)
{
	const string DEFAULT_BUTTON_CLASS = "btn btn-default ";

	string buttonClass = DEFAULT_BUTTON_CLASS;
	switch(description.AuthenticationType)
	{
		case "Facebook":
			buttonClass += "facebookButtonPlain";
			break;
		case "Google":
			buttonClass += "googleButtonPlain";
			break;
		case "LinkedIn":
			buttonClass += "linkedInButtonPlain";
			break;
		default:
			break;
	}
	
	<button type="submit" class="@buttonClass" id="@description.AuthenticationType" name="provider" value="@description.AuthenticationType" title="Log in using your @description.Caption account">@description.AuthenticationType</button>
}
